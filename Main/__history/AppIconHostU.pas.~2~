unit AppIconHostU;

interface

uses
  Winapi.Windows, System.Classes, Vcl.Forms, Vcl.Graphics, Winapi.Messages;

type
  TFormAppIconHost = class(TForm)
  protected
    procedure WMSysCommand(var Msg: TWMSysCommand); message WM_SYSCOMMAND;
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  FormAppIconHost: TFormAppIconHost;

implementation

{$R *.dfm}

uses ShwFilesU;

constructor TFormAppIconHost.Create(AOwner: TComponent);
begin
  inherited CreateNew(AOwner);

  BorderStyle := bsNone;
  Width := 1;
  Height := 1;
  Left := -1000;
  Top := -1000;
  Visible := True;

  // wichtig: eigene Taskbar-Repräsentation erzwingen
  Application.MainFormOnTaskbar := False;
  PopupMode := pmNone;

  Icon := TIcon.Create;
  ShowWindow(Handle, SW_HIDE); // kein sichtbares Fenster
end;

procedure TFormAppIconHost.WMSysCommand(var Msg: TWMSysCommand);
begin
  inherited;
  if Msg.CmdType = SC_RESTORE then
  begin
    // App-Icon wurde geklickt (wenn minimiert) oder mit Alt+Tab ausgewählt
    // Fenster "Dateien zeigen" anzeigen
    if Assigned(ShwFiles) then
    begin
      ShwFiles.Show;
      ShwFiles.BringToFront;
      ShwFiles.SetFocus;
    end;
  end;
end;

end.
